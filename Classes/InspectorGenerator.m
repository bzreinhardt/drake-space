classdef InspectorGenerator
    %UNTITLED2 Summary of this class goes here
    %   Detailed explanation goes here
    
    
    
    methods
        function obj = InspectorGenerator(options)
            if nargin < 1
                options = struct();
            end
            if isfield(options,'is_xacro') 
                obj.is_xacro = options.is_xacro;
            end
        end
%% Set all the couplers at once
        function obj = setCouplers(obj,a,d)
            for i = 1:size(a,1)
                obj = obj.addCoupler(a(i,:),d(i,:));
            end
        end
            
        function obj = addCoupler(obj,axis, d)
            %@param axis = 3x1
            if size(axis,1) ~= 1
                axis = axis';
            end
            if size(d,1) ~= 1
                d= d';
            end
            visualrpy = findVisualrpy(axis);
            if size(visualrpy,1) ~= 1
                visualrpy = visualrpy';
            end
            if obj.is_xacro == 1
                obj.max_coupler_id = obj.max_coupler_id + 1;
                id = obj.max_coupler_id;
                obj.text{end+1} = obj.coupler_jointx;
                obj.vals{end+1} = [id, d, axis, id];
                obj.text{end+1} = obj.coupler_linkx;
                obj.vals{end+1} = [id, visualrpy];
                obj.text{end+1} = obj.couplerx;
                obj.vals{end+1} = [id, id, axis];
            else
            %ADDCOUPLER adds a coupler to the text to be built that is located on a
            %vector d in body coordinates and rotates about axis
            obj.max_coupler_id = obj.max_coupler_id + 1;
            id = obj.max_coupler_id;
            
            %add the text for a joint, a link and a force object
            %keep each component in a different cell and then build the
            %whole thing when you write the file
            obj.text{end+1} = obj.coupler_joint;
            obj.vals{end+1} = [id, d, axis, id];
            obj.text{end+1} = obj.coupler_link;
            obj.vals{end+1} = [id, visualrpy];
            obj.text{end+1} = obj.coupler;
            obj.vals{end+1} = [id, id, axis];
            %add the values associated with the joint
            end
            
        end
        function obj = genFile(obj,file_name)
            
            if nargin < 2
                file_name = obj.filename;
            end
            fileID = fopen(file_name,'w');
            if obj.is_xacro == 1
            else
            fprintf(fileID,obj.top);
            fprintf(fileID,obj.base_link);
            for i = 1:length(obj.text)
                fprintf(fileID,obj.text{i},obj.vals{i});
            end
            fprintf(fileID,obj.bottom);
            end
            
        end
    end
    
    
    
    properties
        num_couplers = 0;
        max_coupler_id = 0;
        filename;
        text = {};
        vals = {};
        top = '<?xml version="1.0" ?>\n <robot name="test_inductor">\n';
        bottom = '</robot>';
        is_xacro;
        
        base_link = ['<link name="base_link">\n',...
            '<inertial>\n',...
            '<mass value="1"/>\n',...
            '<origin xyz="0 0 0"/>\n',...
            '<inertia ixx="1" ixy="0" ixz="0" iyx="0" iyy="1" iyz="0" izx="0" izy="0" izz="1" />\n',...
            '</inertial>\n',...
            '<visual>\n',...
            '<origin rpy="0 0 0" xyz="0 0 0" />\n',...
            '<geometry>\n',...
            '<box size="0.1 0.1 0.1" />\n',...
            '</geometry>\n',...
            '</visual>\n',...
            '<collision>\n',...
            '<origin rpy="0 0 0" xyz="0 0 0" />\n',...
            '<geometry>\n',...
            '<box size="0.1 0.1 0.1" />\n',...
            '</geometry>\n',...
            '</collision>\n',...
            '</link>\n'];
        
        coupler_joint = ['<joint name="coupler%d_joint" type="continuous">\n',...
            '<origin xyz="%f %f %f"/>\n',...
            '<axis xyz = "%f %f %f" />\n',...
            '<parent link="base_link"/>\n',...
            '<child link="coupler%d_link"/>\n',...
            '</joint>\n'];
        
        coupler = ['<force_element name="coupler%d">\n',...
            '<induction_coupler lower_limit="-10" upper_limit="10" scale_factor_thrust="1.0" scale_factor_moment="0.0245">\n',...
            '<parent link="coupler%d_link"/>\n',...
            '<origin xyz="0 0 0"/>\n',...
            '<axis xyz="%f %f %f"/>\n',...
            '</induction_coupler>\n',...
            '</force_element>\n'];
        coupler_link = ['<link name="coupler%d_link">\n',...
            '<inertial>\n',...
            '<mass value="0.01"/>\n',...
            '<origin xyz="0 0 0"/>\n',...
            '<inertia ixx="0.01" ixy="0" ixz="0" iyx="0" iyy="0.01" iyz="0" izx="0" izy="0" izz="0.01" />\n',...
            '</inertial>\n',...
            '<visual>\n',...
            '<origin rpy="%f %f %f" xyz="0 0 0" />\n',...
            '<geometry>\n',...
            '<cylinder length="0.01" radius="0.02" />\n',...
            '</geometry>\n',...
            '</visual>\n',...
            '<collision>\n',...
            '<origin rpy="0 0 0" xyz="0 0 0" />\n',...
            '<geometry>\n',...
            '<box size="0.0 0.0 0.0" />\n',...
            '</geometry>\n',...
            '</collision>\n',...
            '</link>\n']
        
        coupler_macro = ['<xacro:macro name="coupler" params="axis coupler_num">\n,'...
    '<force_element name="coupler1">\n,'...
	'<induction_coupler lower_limit="-10" upper_limit="10" scale_factor_thrust="1.0" scale_factor_moment="0.0245">\n,'...
	    '<parent link="coupler${coupler_num}_link"/>\n,'...
	    '<origin xyz="0 0 0"/>\n,'...
	    '<axis xyz="1 0 0"/>\n,'...
	'</induction_coupler>\n,'...
    '</force_element>\n,'...
'</xacro:macro>'];
coupler_joint_macro = ['<xacro:macro name="coupler_joint" params="origin axis coupler_num">\n,'...
    '<joint name="coupler${coupler_num}_joint" type="continuous">\n,'...
	'<origin xyz="${origin}"/>\n,'...
	'<axis xyz = "${axis}" />\n,'...
    '<limit lower="-0.01" upper="0.01" />\n,'...
'<parent link="base_link"/>\n,'...
'<child link="coupler${coupler_num}_link"/>\n,'...
'</joint>\n,'...
'</xacro:macro>'];
coupler_link_macro = ['<xacro:macro name="coupler_link" params="coupler_num">\n,'...
	'<link name="coupler${coupler_num}_link">\n,'...
	'<inertial>\n,'...
	    '<mass value="0.01"/>\n,'...
	    '<origin xyz="0 0 0"/>\n,'...
	    '<inertia ixx="0.01" ixy="0" ixz="0" iyx="0" iyy="0.01" iyz="0" izx="0" izy="0" izz="0.01" />\n,'...
	'</inertial>\n,'...
	'<visual>\n,'...
	    '<origin rpy="0 0 0" xyz="0 0 0" />\n,'...
	    '<geometry>\n,'...
		'<cylinder length="0.01" radius="0.02"/>\n,'...
	    '</geometry>\n,'...
	'</visual>\n,'...
	'<collision>\n,'...
	    '<origin rpy="0 0 0" xyz="0 0 0" />\n,'...
	    '<geometry>\n,'...
		'<box size="0.0 0.0 0.0" />\n,'...
	    '</geometry>\n,'...
	'</collision>\n,'...
    '</link>\n,'...
    '</xacro:macro>'];
        base_linkx = ['<link name="base_link">\n',...
            '<inertial>\n',...
            '<mass value="1"/>\n',...
            '<origin xyz="0 0 0"/>\n',...
            '<inertia ixx="1" ixy="0" ixz="0" iyx="0" iyy="1" iyz="0" izx="0" izy="0" izz="1" />\n',...
            '</inertial>\n',...
            '<visual>\n',...
            '<origin rpy="0 0 0" xyz="0 0 0" />\n',...
            '<geometry>\n',...
            '<box size="0.1 0.1 0.1" />\n',...
            '</geometry>\n',...
            '</visual>\n',...
            '<collision>\n',...
            '<origin rpy="0 0 0" xyz="0 0 0" />\n',...
            '<geometry>\n',...
            '<box size="0.1 0.1 0.1" />\n',...
            '</geometry>\n',...
            '</collision>\n',...
            '</link>\n'];
       
        coupler_jointx = ['<xacro:coupler_joint coupler_num="%d" axis = "%f %f %f" origin="%f %f %f"/>'];
        couplerx = ['<xacro:coupler coupler_num="%d" axis="%f %f %f"/>'];
        coupler_linkx = ['<xacro:coupler_link coupler_num="%d"/>']
        
        
    end
end